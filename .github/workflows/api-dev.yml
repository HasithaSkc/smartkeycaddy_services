# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy API-Dev

env:
  AZURE_WEBAPP_NAME: 'azu-aue-smartkeycaddy-appservices-api-dev'    # set this to the name of your Azure Web App
  AZURE_FUNCTIONAPP_NAME: 'azu-aue-smartkeycaddy-functionapp-dev'    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '8'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "dev" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      # Replace appsettings.json with appsettings.Development.json
      - name: Overwrite appsettings.json - WebApi
        run: |
          cd ./SmartKeyCaddy.Api
          cp appsettings.Development.json appsettings.json
          rm -f appsettings.Development.json

      # Replace appsettings.json with appsettings.Development.json
      - name: Overwrite appsettings.json - FunctionApp
        run: |
          cd ./SmartKeyCaddy.FunctionApp
          cp appsettings.Development.json appsettings.json
          rm -f appsettings.Development.json

      - name: Build with dotnet
        run: dotnet build --configuration Release
        
      - name: Dotnet publish - WebApi
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/Publish_Output/WebApi ./SmartKeyCaddy.Api/SmartKeyCaddy.Api.csproj

      - name: Upload artifact for deployment job - WebApi
        uses: actions/upload-artifact@v3
        with:
          name: WebApi
          path: ${{env.DOTNET_ROOT}}/Publish_Output/WebApi

      - name: Dotnet publish - FunctionApp
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/Publish_Output/FunctionApp ./SmartKeyCaddy.FunctionApp/SmartKeyCaddy.FunctionApp.csproj

      - name: Upload artifact for deployment job - FunctionApp
        uses: actions/upload-artifact@v3
        with:
          name: FunctionApp
          path: ${{env.DOTNET_ROOT}}/Publish_Output/FunctionApp

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job - WebApi
        uses: actions/download-artifact@v3
        with:
          name: WebApi

      - name: Download artifact from build job - FunctionApp
        uses: actions/download-artifact@v3
        with:
          name: FunctionApp
          
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_API_DEV }}
          package: WebApi

      - name: Deploy to Azure FunctionApp
        id: deploy-to-functionapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_FUNCTIONAPP_DEV }}
          package: FunctionApp
